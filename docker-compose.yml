services:
  # Application Services
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: api-gateway
        PORT: ${API_GATEWAY_PORT}
    ports:
      - "${API_GATEWAY_PORT}:${API_GATEWAY_PORT}"
    environment:
      - API_GATEWAY_SERVER_PORT=${API_GATEWAY_PORT}
      - API_GATEWAY_DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT}
      - ORDER_SERVICE_URL=${ORDER_SERVICE_URL}
      - PAYMENT_SERVICE_URL=${PAYMENT_SERVICE_URL}
      - INVENTORY_SERVICE_URL=${INVENTORY_SERVICE_URL}
      - NOTIFICATION_SERVICE_URL=${NOTIFICATION_SERVICE_URL}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      order-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      inventory-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${API_GATEWAY_PORT}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  order-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: order
        PORT: ${ORDER_SERVICE_PORT}
    ports:
      - "${ORDER_SERVICE_PORT}:${ORDER_SERVICE_PORT}"
    environment:
      - ORDER_SERVER_PORT=${ORDER_SERVICE_PORT}
      - ORDER_DATABASE_URL=${ORDER_DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${ORDER_SERVICE_PORT}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  order-migrate:
    image: migrate/migrate
    volumes:
      - ./services/order/migrations:/migrations
    command: ["-path", "/migrations", "-database", "${ORDER_DATABASE_URL}", "up"]
    depends_on:
      postgres:
        condition: service_healthy

  payment-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: payment
        PORT: ${PAYMENT_SERVICE_PORT}
    ports:
      - "${PAYMENT_SERVICE_PORT}:${PAYMENT_SERVICE_PORT}"
    environment:
      - PAYMENT_SERVER_PORT=${PAYMENT_SERVICE_PORT}
      - PAYMENT_DATABASE_URL=${PAYMENT_DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${PAYMENT_SERVICE_PORT}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  payment-migrate:
    image: migrate/migrate
    volumes:
      - ./services/payment/migrations:/migrations
    command: ["-path", "/migrations", "-database", "${PAYMENT_DATABASE_URL}", "up"]
    depends_on:
      postgres:
        condition: service_healthy

  inventory-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: inventory
        PORT: ${INVENTORY_SERVICE_PORT}
    ports:
      - "${INVENTORY_SERVICE_PORT}:${INVENTORY_SERVICE_PORT}"
    environment:
      - INVENTORY_SERVER_PORT=${INVENTORY_SERVICE_PORT}
      - INVENTORY_DATABASE_URL=${INVENTORY_DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${INVENTORY_SERVICE_PORT}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  inventory-migrate:
    image: migrate/migrate
    volumes:
      - ./services/inventory/migrations:/migrations
    command: ["-path", "/migrations", "-database", "${INVENTORY_DATABASE_URL}", "up"]
    depends_on:
      postgres:
        condition: service_healthy

  notification-service:
    build:
      context: .
      dockerfile: services/notification/Dockerfile
      args:
        - PORT=${NOTIFICATION_SERVICE_PORT}
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_PORT}"
    environment:
      - NOTIFICATION_SERVER_PORT=${NOTIFICATION_SERVICE_PORT}
      - DATABASE_URL=${NOTIFICATION_DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - KAFKA_BROKERS=${KAFKA_BROKERS}
      - JAEGER_ENDPOINT=${JAEGER_ENDPOINT}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:${NOTIFICATION_SERVICE_PORT}/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  notification-migrate:
    build:
      context: .
      dockerfile: services/notification/Dockerfile
    command:
      - "yoyo"
      - "apply"
      - "--batch"
      - "--database"
      - "${NOTIFICATION_DATABASE_URL}"
      - "./migrations"
    environment:
      - DATABASE_URL=${NOTIFICATION_DATABASE_URL}
    depends_on:
      postgres:
        condition: service_healthy

  # Infrastructure
  postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-databases.sh:/docker-entrypoint-initdb.d/init-databases.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    ports:
      - "${REDIS_PORT}:6379"
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - redis_data:/data
      - ./infrastructure/redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_INIT_LIMIT: 5
      ZOOKEEPER_MAX_CLIENT_CNXNS: 60
      ZOOKEEPER_AUTOPURGE_SNAP_RETAIN_COUNT: 3
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: 24
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "${KAFKA_PORT}:9092"
      - "${KAFKA_JMX_PORT}:9999"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_LOG_SEGMENT_BYTES: 1073741824
      KAFKA_COMPRESSION_TYPE: producer
      KAFKA_JMX_PORT: ${KAFKA_JMX_PORT}
      KAFKA_JMX_HOSTNAME: kafka
    volumes:
      - kafka_data:/var/lib/kafka/data
      - ./infrastructure/kafka/server.properties:/etc/kafka/server.properties:ro
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "${KAFKA_UI_PORT}:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: ${KAFKA_UI_CLUSTER_NAME}
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_BROKERS}
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: ${KAFKA_JMX_PORT}

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT}:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT}:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
      - grafana_data:/var/lib/grafana

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "${JAEGER_AGENT_ZIPKIN_PORT}:5775/udp"
      - "${JAEGER_AGENT_COMPACT_PORT}:6831/udp"
      - "${JAEGER_AGENT_BINARY_PORT}:6832/udp"
      - "${JAEGER_ADMIN_PORT}:5778"
      - "${JAEGER_UI_PORT}:16686"
      - "${JAEGER_JAEGER_THRIFT_PORT}:14268"
      - "${JAEGER_JAEGER_BINARY_PORT}:14250"
      - "${JAEGER_ZIPKIN_PORT}:9411"

volumes:
  postgres_data:
  redis_data:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  prometheus_data:
  grafana_data:
