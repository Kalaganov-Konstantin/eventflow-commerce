name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write

env:
  GO_VERSION: '1.24'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-go
      - name: Run linters on all modules
        run: |
          # Programmatically find all modules in go.work and lint them
          for mod in $(go work edit -json | jq -r '.Use[].DiskPath'); do
            # Check if there are any .go files in the module directory (including subdirs)
            if find "$mod" -name '*.go' | head -1 | read; then
              echo "Linting $mod..."
              (cd "$mod" && golangci-lint run --timeout=5m)
            else
              echo "Skipping $mod (no .go files found)."
            fi
          done

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-go
      - name: Run tests on all modules
        run: |
          # Programmatically find all modules in go.work and test them
          for mod in $(go work edit -json | jq -r '.Use[].DiskPath'); do
            # Check if there are any .go files in the module directory
            if find "$mod" -maxdepth 1 -name '*.go' | read; then
              echo "Running tests for $mod..."
              (cd "$mod" && go test -v -race -cover ./...)
            else
              echo "Skipping $mod (no .go files found)."
            fi
          done

  security-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-go
      - name: Run govulncheck on all modules
        run: |
          # Programmatically find all modules in go.work and scan them
          for mod in $(go work edit -json | jq -r '.Use[].DiskPath'); do
            echo "Scanning $mod for vulnerabilities..."
            (cd "$mod" && govulncheck ./...)
          done

  python-lint:
    name: Python Lint (Notification Service)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Install dependencies
        run: |
          cd services/notification
          pip install -r requirements.txt
          pip install ruff black
      - name: Run ruff
        run: cd services/notification && ruff check .
      - name: Run black
        run: cd services/notification && black --check .

