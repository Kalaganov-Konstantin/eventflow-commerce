name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

env:
  GO_VERSION: '1.24'
  PYTHON_VERSION: '3.12'
  NODE_VERSION: '20'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: ./.github/actions/setup-go
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.0"
          enable-cache: true
      - name: Install dependencies
        run: make setup
      - name: Run linters
        run: make lint

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - uses: ./.github/actions/setup-go
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.0"
          enable-cache: true
      - name: Install dependencies
        run: make setup
      - name: Run tests
        run: make test

  pre-commit-check:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: ./.github/actions/setup-go
      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.0"
          enable-cache: true
      - name: Install dependencies
        run: make setup
      - name: Install pre-commit
        run: pip install pre-commit
      - name: Run pre-commit on all files
        run: pre-commit run --all-files

  security-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup-go
      - name: Run govulncheck on all modules
        run: |
          # This logic remains here as it's CI-specific and not part of the local dev loop.
          for mod in $(go work edit -json | jq -r '.Use[].DiskPath'); do
            if find "$mod" -name '*.go' | head -1 | read; then
              echo "Scanning $mod for vulnerabilities..."
              (cd "$mod" && govulncheck ./...)
            else
              echo "Skipping $mod (no .go files found)."
            fi
          done
